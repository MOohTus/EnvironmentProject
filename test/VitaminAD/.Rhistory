keep <- rowSums(counts(ddsTC)) >= 10
ddsTC <- ddsTC[keep,]
ddsTC <- DESeq(ddsTC, test = "LRT", reduced = ~ Batch + Phenotype + Age)
ddsTC <- DESeq(ddsTC, test = "LRT", reduced = ~ Batch + Phenotype + Age)
ddsTC
ddsTC <- DESeq(ddsTC, test = "LRT", reduced = ~ Batch + Phenotype + Age)
design <- formula("~ Batch + Phenotype + Age + Phenotype:Age")
ddsTC <- DESeq(ddsTC, test = "LRT", reduced = ~ Batch + Phenotype + Age)
coldata$Phenotype <- factor(x = coldata$Phenotype, levels = c("WT", "KI"), ordered = FALSE)
coldata$Age <- factor(x = coldata$Age, levels = c("Jeune", "Critique", "Vieux"), ordered = FALSE)
design <- formula("~ Batch + Phenotype + Age + Phenotype:Age")
ddsTC <- DESeqDataSetFromMatrix(countData = countsData, colData = coldata, design = design)
keep <- rowSums(counts(ddsTC)) >= 10
ddsTC <- ddsTC[keep,]
ddsTC <- DESeq(ddsTC, test = "LRT", reduced = ~ Batch + Phenotype + Age)
resTC <- results(ddsTC)
resTC <- results(ddsTC)
summary(resTC)
resTC <- resTC[order(resTC$pvalue),]
head(resTC)
resTCTop10 <- as.data.frame(head(resTC, 10))
resTCTop10
resTCTop10
resTC <- resTC[order(resTC$pvalue),]
resTCTop10 <- as.data.frame(head(resTC, 10))
WTvsKIGenesID <- row.names(resTCTop10)
resTCTop10 <- createTableReport(table = resTCTop10, annot = annot)
WTvsKIGenesName <- resTCTop10$GeneName
resTCTop10
genesId <- WTvsKIGenesID
countsNormDF <- countsNorm[row.names(countsNorm) %in% genesId,]
countsNormDF
countsNormDF$GeneName <- annot[annot$V1 %in% row.names(countsNormDF),"V2"]
countsNormDF
WTvsKIGenesName
countsNormReshape <- reshape2::melt(data = countsNormDF, id.vars = "GeneName", variable.name = "SampleID", value.name = "NormCounts")
countsNormReshape
?plotCounts
plotCounts(ddsTC, intgroup = c("Phenotype", "Age"), returnData = TRUE)?plotCounts
plotCounts
DESeq2::counts(object = ddsTC)
?counts
?DESeq2::counts()
plotCounts
counts(ddsTC, normalized = normalized)
counts(ddsTC, normalized = TRUE)
counts(ddsTC, normalized = TRUE)
countsNorm <- counts(ddsTC, normalized = TRUE)
createPlotsLimma(countsNorm = countsNorm, genesId = WTvsKIGenesID, annot = annot)
genesId <- WTvsKIGenesID
countsNormDF <- countsNorm[row.names(countsNorm) %in% genesId,]
countsNormDF$GeneName <- annot[annot$V1 %in% row.names(countsNormDF),"V2"]
countsNorm
str(countsNorm)
countsNorm <- counts(ddsTC, normalized = TRUE)
createPlotsLimma(countsNorm = countsNorm, genesId = WTvsKIGenesID, annot = annot)
countsNorm
countsNorm <- counts(ddsTC, normalized = TRUE)
genesId <- WTvsKIGenesID
countsNormDF <- countsNorm[row.names(countsNorm) %in% genesId,]
countsNormDF$GeneName <- annot[annot$V1 %in% row.names(countsNormDF),"V2"]
countsNormReshape <- reshape2::melt(data = countsNormDF, id.vars = "GeneName", variable.name = "SampleID", value.name = "NormCounts")
countsNormDF
countsNormDF <- countsNorm[row.names(countsNorm) %in% genesId,]
countsNormDF
annot
annot$V1
row.names(countsNormDF)
annot[annot$V1 %in% row.names(countsNormDF),"V2"]
countsNorm[row.names(countsNorm) %in% genesId,]
countsNormDF <- countsNorm[row.names(countsNorm) %in% genesId,]
str(countsNormDF)
countsNorm <- as.data.frame(counts(ddsTC, normalized = TRUE))
createPlotsLimma(countsNorm = countsNorm, genesId = WTvsKIGenesID, annot = annot)
createPlotsLimma(countsNorm = countsNorm, genesId = WTvsKIGenesID, annot = annot)
gene <- which.min(resTC$padj)
gene
exp <- plotCounts(ddsTC, gene, intgroup = c("Phenotype", "Age"), returnData = TRUE)
exp
ddsTC
exp <- plotCounts(ddsTC, "ENSMUSG00000049037", intgroup = c("Phenotype", "Age"), returnData = TRUE)
exp
exp$Age <- as.numeric(exp$Age)
ggplot(exp, aes(x = Age, y = count, color = Phenotype, group = Phenotype)) +
geom_point() + stat_summary(fun = mean, geom = "line") +
scale_y_log10() + theme_minimal() + ggtitle("ENSMUSG00000049037")
ddsTC_filt <- DESeqDataSetFromMatrix(countData = countsData_filt, colData = coldata, design = design)
keep <- rowSums(counts(ddsTC_filt)) >= 10
ddsTC_filt <- ddsTC_filt[keep,]
ddsTC_filt
ddsTC
unlink("Documents/07_SideProjects/10_Epilepsy_eqLV_Lucile/01_RNAseq/ProfileAnalysis/KCNQ2_ProfileAnalysis_cache", recursive = TRUE)
unlink("Documents/07_SideProjects/10_Epilepsy_eqLV_Lucile/01_RNAseq/ProfileAnalysis/KCNQ2_ProfileAnalysis_cache", recursive = TRUE)
wk_dir <- "/home/morgane/Documents/07_SideProjects/10_Epilepsy_eqLV_Lucile/01_RNAseq/ProfileAnalysis/"
knitr::opts_knit$set(root.dir = file.path(wk_dir)) ## = setwd()
knitr::opts_chunk$set(fig.pos = 'H', cache = TRUE, echo = TRUE, eval = TRUE)
countsFile <- "00_Data/1pass_comptage.tab"
phenoFile <- "00_Data/phenoTable.tab"
annotationFile <- "00_Data/annotation.tab"
createPlotsLimma <- function(countsNorm, genesId, annot){
countsNormDF <- countsNorm[row.names(countsNorm) %in% genesId,]
countsNormDF$GeneName <- annot[annot$V1 %in% row.names(countsNormDF),"V2"]
countsNormReshape <- reshape2::melt(data = countsNormDF, id.vars = "GeneName", variable.name = "SampleID", value.name = "NormCounts")
counts4Plot <- merge(x = countsNormReshape, y = coldata, by.x = "SampleID", by.y = 0)
ggplot(data = counts4Plot, aes(x = Time, y = NormCounts, color = Phenotype)) +
geom_point() +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
stat_summary(fun = mean, geom = "line") + theme_minimal() +
facet_wrap(.~ GeneName, scales = "free", ncol = 3) +
guides(fill = guide_legend(title = "Phenotype"))
}
createTableReport <- function(table, annot){
table$GeneName <- unlist(lapply(row.names(table), function(ID){
if(ID %in% annot$V1){
return(annot[annot$V1 == ID,"V2"])
}
else{
return(ID)
}
}))
row.names(table) <- table$GeneName
return(table)
}
## Create matrix
createMatrix4Upset <- function(lists){
tmp <- stack(lists)
tmp <- cbind(tmp, val = 1)
matrix <- as.data.frame(reshape2::acast(
data = tmp, formula = values ~ ind, value.var = "val",
fill = 0))
return(matrix)
}
library("knitr")
library("kableExtra")
library("UpSetR")
countsData <- read.table(file = countsFile, header = TRUE, sep = "\t", row.names = 1)
colnames(countsData) <- gsub(pattern = "X", replacement = "", x = colnames(countsData))
countsData <- countsData[c(-1:-5)]
countsData <- countsData[,c(19:36, 1:18)]
countsData[c(1:5), c(1:5)]
dim(countsData)
coldata <- read.table(phenoFile, sep = "\t", head = TRUE, row.names = 1, stringsAsFactors = TRUE, colClasses = "factor")
coldata$Phenotype <- factor(x = coldata$Phenotype, levels = c("WT", "KI"), ordered = TRUE)
coldata$Age <- factor(x = coldata$Age, levels = c("Jeune", "Critique", "Vieux"), ordered = TRUE)
coldata$ConditionName <- as.factor(paste(coldata$Phenotype, coldata$Age, coldata$Batch, sep = "_"))
coldata$Condition <- as.factor(paste(coldata$Phenotype, coldata$Age, sep = "_"))
coldata <- coldata[order(row.names(coldata)),]
## Prepare age as continuous
coldata$Time <- as.integer(coldata$Age)
coldata$Time[coldata$Time == 1] <- 0
coldata$Time[coldata$Time == 2] <- 1
coldata$Time[coldata$Time == 3] <- 2
name2Remove <- list("2018A131", "2018A141")
countsData <- countsData[,!(colnames(countsData) %in% name2Remove)]
coldata <- coldata[!(row.names(coldata) %in% name2Remove),]
annot <- read.table(file = annotationFile, header = FALSE, sep = "\t")
countsData_sd <- apply(X = countsData, MARGIN = 1, FUN = sd)
countsData_sd <- as.matrix(sort(x = countsData_sd, decreasing = TRUE))
countsData_sd_ind <- which(countsData_sd > 0) ## positional number of sd > 0
selected <- rownames(countsData_sd)[1:min(length(countsData_sd_ind), 10000)]
countsData_filt <- countsData[row.names(countsData) %in% selected,]
library("DESeq2")
library("ggplot2")
```{r deseq2-coldata}
coldata$Phenotype <- factor(x = coldata$Phenotype, levels = c("WT", "KI"), ordered = FALSE)
coldata$Age <- factor(x = coldata$Age, levels = c("Jeune", "Critique", "Vieux"), ordered = FALSE)
design <- formula("~ Batch + Phenotype + Age + Phenotype:Age")
ddsTC <- DESeqDataSetFromMatrix(countData = countsData, colData = coldata, design = design)
keep <- rowSums(counts(ddsTC)) >= 10
ddsTC <- ddsTC[keep,]
ddsTC <- DESeq(ddsTC, test = "LRT", reduced = ~ Batch + Phenotype + Age)
resTC <- results(ddsTC)
summary(resTC)
resTC <- resTC[order(resTC$pvalue),]
resTCTop10 <- as.data.frame(head(resTC, 10))
WTvsKIGenesID <- row.names(resTCTop10)
resTCTop10 <- createTableReport(table = resTCTop10, annot = annot)
WTvsKIGenesName <- resTCTop10$GeneName
countsNorm <- as.data.frame(counts(ddsTC, normalized = TRUE))
fiss <- plotCounts(ddsTC, "Apob",
intgroup = c("minute","strain"), returnData = TRUE)
ddsTC
annot$V1 == "Apob"
annot[annot$V1 == "Apob"]
annot[annot$V1 == "Apob",]
annot[annot$V2 == "Apob",]
fiss <- plotCounts(ddsTC, "ENSMUSG00000020609",
intgroup = c("minute","strain"), returnData = TRUE)
?plotCounts
fiss <- plotCounts(ddsTC, "ENSMUSG00000020609", intgroup = c("Phenotype","Age"), returnData = TRUE)
fiss
ggplot(fiss,
aes(x = Time, y = count, color = Phenotype, group = Phenotype)) +
geom_point() + stat_summary(fun.y=mean, geom="line") +
scale_y_log10()
fiss <- plotCounts(ddsTC, "ENSMUSG00000020609", intgroup = c("Phenotype","Time"), returnData = TRUE)
ggplot(fiss,
aes(x = Time, y = count, color = Phenotype, group = Phenotype)) +
geom_point() + stat_summary(fun.y=mean, geom="line") +
scale_y_log10()
ggplot(fiss,
aes(x = Time, y = count, color = Phenotype, group = Phenotype)) +
geom_point() + stat_summary(fun.y=mean, geom="line") +
scale_y_log10()
ggplot(fiss,
aes(x = Time, y = count, color = Phenotype, group = Phenotype)) +
geom_point() + stat_summary(fun.y=mean, geom="line") +
scale_y_log10()
ggplot(fiss,
aes(x = Time, y = count, color = Phenotype, group = Phenotype)) +
geom_point() + stat_summary(fun=mean, geom="line") +
scale_y_log10()
ggplot(fiss,
aes(x = Time, y = count, color = Phenotype, group = Phenotype)) +
geom_point() + stat_summary(fun=mean, geom="line")
?filterByExpr
404+449+2002
426+1708+288
430+1735+296
426+1807+297
1026+772+2113
2530*100/2855
100-(2530*100/2855)
100-(2461*100/2855)
100-(2422*100/2855)
?prcomp
C <- chol(S <- toeplitz(.9 ^ (0:31))) # Cov.matrix and its root
all.equal(S, crossprod(C))
set.seed(17)
X <- matrix(rnorm(32000), 1000, 32)
Z <- X %*% C  ## ==>  cov(Z) ~=  C'C = S
all.equal(cov(Z), S, tolerance = 0.08)
pZ <- prcomp(Z, tol = 0.1)
summary(pZ) # only ~14 PCs (out of 32)
## or choose only 3 PCs more directly:
pz3 <- prcomp(Z, rank. = 3)
summary(pz3) # same numbers as the first 3 above
library("ggplot2")
ggplot(aes(data = pz3, x = PC1, y PC2)) + geom_point()
library("ggplot2")
ggplot(data = pz3, aes(x = PC1, y PC2)) + geom_point()
ggplot(data = pz3, aes(x = PC1, y = PC2)) + geom_point()
ggplot(aes(data = pz3, x = PC1, y = PC2)) + geom_point()
ggplot(data = pz3) + geom_point(aes(x = PC1, y = PC2))
pz3
pz3$x
HEAD(pz3$x)
head(pz3$x)
head(pz3$x$PC1)
head(pz3$x[1])
head(pz3$x[1,])
head(pz3$x[,1])
ggplot(data = pz3$x) + geom_point(aes(x = PC1, y = PC2))
str(pz3)
PCA <- as.data.frame(pz3$x)
PCA
ggplot(data = PCA) + geom_point(aes(x = PC1, y = PC2))
ggplot(data = PCA) + geom_point(aes(x = PC1, y = PC2, color = "salmon"))
ggplot(data = PCA) + geom_point(aes(x = PC1, y = PC2, color = "salmon"), legend = FALSE)
ggplot(data = PCA) +
geom_point(aes(x = PC1, y = PC2, color = "salmon")) +
theme_minimal()
PCA$PC1X
X
dim(X)
ggplot(data = PCA) +
geom_point(aes(x = PC1, y = PC2, color = "salmon")) +
theme(legend.position="none") +
theme_minimal()
Z
PCA$group <- c(rep(500,1), rep(500,2))
PCA$group <- c(rep(500,1), rep(500,2))
dim(PCA)
head(PCA)
c(rep(500,1), rep(500,2))
c(rep(1, 500), rep(2, 500))
PCA$group <- c(rep(1, 500), rep(2, 500))
ggplot(data = PCA) +
geom_point(aes(x = PC1, y = PC2, color = group)) +
theme_minimal()
PCA$group <- factor(c(rep(1, 500), rep(2, 500)))
ggplot(data = PCA) +
geom_point(aes(x = PC1, y = PC2, color = group)) +
theme_minimal()
dim(Z)
ggsave(filename = "Bureau/AFM_workshop_pca.png", device = "png", dpi = 300)
ggsave(filename = "Bureau/AFM_workshop_pca.png", device = "png", dpi = 300, width = 10)
ggsave(filename = "Bureau/AFM_workshop_pca.png", device = "png", dpi = 300, width = 15)
ggsave(filename = "Bureau/AFM_workshop_pca.png", device = "png", dpi = 300, width = 10)
ggsave(filename = "Bureau/AFM_workshop_pca.png", device = "png", dpi = 300, width = 5)
ggsave(filename = "Bureau/AFM_workshop_pca.png", device = "png", dpi = 300, width = 6)
ggsave(filename = "Bureau/AFM_workshop_pca.png", device = "png", dpi = 250)
50+54+59+60
50+54+59+60+54
## Visualization fo active module networks
library("igraph")
networkFile <- "/home/morgane/Documents/06_Data/NETWORKS/01_InitialNetworks/PPI_2016-11-23.gr"
AMFile <- "/home/morgane/Documents/05_EJPR_RD/WF_Environment/EnvironmentProject/test/VitaminAD/OutputDOMINOResults/DOMINO_D014801_activeModules.txt"
## Read network
network <- read.table(file = networkFile, head = FALSE, sep = " ")
net_graph <- graph_from_data_frame(d = network, directed = FALSE)
net_graph
induced_subgraph(graph = net_graph, vids = AM_selected)
## Read network
network <- read.table(file = networkFile, head = FALSE, sep = " ")
net_graph <- graph_from_data_frame(d = network, directed = FALSE)
net_graph
## Select AM
AM <- read.table(file = AMFile, head = FALSE, sep = "\t")
AM_selected <- AM[AM$V2 == 1,]$V1
induced_subgraph(graph = net_graph, vids = AM_selected)
V(net_graph)[which(V(net_graph) %in% AM_selected)]
V(net_graph)[which(names(V(net_graph)) %in% AM_selected)]
#V(net_graph)[which(names(V(net_graph)) %in% AM_selected)]
vertex_attr_names(net_graph)
vertex_attr(net_graph)
V(net_graph)[which(names(V(net_graph)) %in% AM_selected, arr.ind = TRUE)]
V(net_graph)[which(names(V(net_graph)) %in% AM_selected, arr.ind = FALSE)]
V(net_graph)[which(names(V(net_graph)) %in% AM_selected, useNames = FALSE)]
g <- make_ring(10)
g
induced_subgraph(g, 1:7)
induced_subgraph(graph = net_graph, vids = AM_selected)
str(AM_selected)
induced_subgraph(graph = net_graph, vids = names(V(net_graph)) %in% AM_selected)
am = 1
AM_selected <- AM[AM$V2 == am,]$V1
AM_selected_edges <- ends(graph = net_graph, es = E(net_graph)[which(names(V(net_graph)) %in% AM_selected))
return(AM_selected_edges)
})
induced_subgraph(graph = net_graph, vids = names(V(net_graph)) %in% AM_selected)
AM_selected <- AM[AM$V2 == am,]$V1
AM_selected_edges <- ends(graph = net_graph, es = E(net_graph)[which(names(V(net_graph)) %in% AM_selected))
return(AM_selected_edges)
})
induced_subgraph(graph = net_graph, vids = names(V(net_graph)) %in% AM_selected)
AM_selected_edges <- ends(graph = net_graph, es = E(net_graph)[which(names(V(net_graph)) %in% AM_selected)])
AM_selected_edges
net_AM_selected <- induced_subgraph(graph = net_graph, vids = names(V(net_graph)) %in% AM_selected)
net_AM_selected <- induced_subgraph(graph = net_graph, vids = names(V(net_graph)) %in% AM_selected)
plot(net_AM_selected)
plot(net_AM_selected, layout=layout_as_star(net_AM_selected))
plot(net_AM_selected, layout=layout_randomly(net_AM_selected))
plot(net_AM_selected, layout=layout_randomly(net_AM_selected))
plot(net_AM_selected, layout=layout_with_fr(net_AM_selected))
plot(net_AM_selected, layout=layout_with_kk(net_AM_selected))
tkplot(net_AM_selected)
## From Alberto's part
PPI_file <- "/home/morgane/Documents/06_Data/NETWORKS/01_InitialNetworks/PPI_2016-11-23.gr"
PPI_table <- read.table(file = PPI_file, sep = "\t")
PPI_network <- igraph::graph.data.frame(d = PPI_table, directed = FALSE)
PPI_table
PPI_table <- read.table(file = PPI_file, sep = " ")
PPI_network <- igraph::graph.data.frame(d = PPI_table, directed = FALSE)
PPI_network
PPI_network <- igraph::simplify(graph = PPI_network, remove.multiple = TRUE, remove.loops = TRUE)
PPI_network
AM_selected <- AM[AM$V2 == AM_nb,]$V1
AM_nb <- 1
AM_selected <- AM[AM$V2 == AM_nb,]$V1
AM_selected
net_AM_selected <- induced.subgraph(graph = net_graph, vids = which(names(V(net_graph)) %in% AM_selected))
net_AM_selected
results_dt <- data.frame(get.edgelist(net_AM_selected), "Source" = AM_nb)
results_dt
results_dt <- data.frame(get.edgelist(net_AM_selected), "Cluster" = AM_nb)
results_dt
## Extract sub network for each active modules
AM <- read.table(file = AMFile, head = FALSE, sep = "\t")
lapply(X = unique(AM$V2), FUN = function(AM_nb){
AM_selected <- AM[AM$V2 == AM_nb,]$V1
net_AM_selected <- induced.subgraph(graph = net_graph, vids = which(names(V(net_graph)) %in% AM_selected))
results_dt <- data.frame(get.edgelist(net_AM_selected), "Cluster" = AM_nb)
})
lapply(X = unique(AM$V2), FUN = function(AM_nb){
AM_selected <- AM[AM$V2 == AM_nb,]$V1
net_AM_selected <- induced.subgraph(graph = net_graph, vids = which(names(V(net_graph)) %in% AM_selected))
results_dt <- data.frame(get.edgelist(net_AM_selected), "Cluster" = AM_nb)
names(results_dt) <- c("Node1", "Node2", "Cluster")
return(results_dt)
})
unlist(lapply(X = unique(AM$V2), FUN = function(AM_nb){
AM_selected <- AM[AM$V2 == AM_nb,]$V1
net_AM_selected <- induced.subgraph(graph = net_graph, vids = which(names(V(net_graph)) %in% AM_selected))
results_dt <- data.frame(get.edgelist(net_AM_selected), "Cluster" = AM_nb)
names(results_dt) <- c("Node1", "Node2", "Cluster")
return(results_dt)
}))
do.call(rbind, lapply(X = unique(AM$V2), FUN = function(AM_nb){
AM_selected <- AM[AM$V2 == AM_nb,]$V1
net_AM_selected <- induced.subgraph(graph = net_graph, vids = which(names(V(net_graph)) %in% AM_selected))
results_dt <- data.frame(get.edgelist(net_AM_selected), "Cluster" = AM_nb)
names(results_dt) <- c("Node1", "Node2", "Cluster")
return(results_dt)
}))
AM_networks <- do.call(rbind, lapply(X = unique(AM$V2), FUN = function(AM_nb){
AM_selected <- AM[AM$V2 == AM_nb,]$V1
net_AM_selected <- induced.subgraph(graph = net_graph, vids = which(names(V(net_graph)) %in% AM_selected))
results_dt <- data.frame(get.edgelist(net_AM_selected), "Cluster" = AM_nb)
names(results_dt) <- c("Node1", "Node2", "Cluster")
return(results_dt)
}))
setwd(dir = "/home/morgane/Documents/05_EJPR_RD/WF_Environment/EnvironmentProject/test/VitaminAD/OutputDOMINOResults/")
## Write results
outputFileName <- "DOMINO_D014801_activeModules.SIF"
write.table(x = AM_networks, file = outputFileName, quote = FALSE, sep = ";", row.names = FALSE, col.names = TRUE)
net_AM_selected
E(net_AM_selected)
length(E(net_AM_selected))
length(V(net_AM_selected))
degree(graph = AM_selected_edges)
degree(graph = net_AM_selected)
mean(degree(graph = net_AM_selected))
max(degree(graph = net_AM_selected))
AM_networks <- do.call(rbind, lapply(X = unique(AM$V2), FUN = function(AM_nb){
AM_selected <- AM[AM$V2 == AM_nb,]$V1
net_AM_selected <- induced.subgraph(graph = net_graph, vids = which(names(V(net_graph)) %in% AM_selected))
results_dt <- data.frame(get.edgelist(net_AM_selected),
"Cluster" = AM_nb,
"EdgesNumber" = length(E(net_AM_selected)),
"NodesNumber" = length(V(net_AM_selected)),
"DegreeMax" = max(degree(graph = net_AM_selected)),
"DegreeMean" = mean(degree(graph = net_AM_selected)))
names(results_dt) <- c("Node1", "Node2", "Cluster", "EdgesNumber", "NodesNumber", "DegreeMax", "DegreeMean")
return(results_dt)
}))
## Write results
outputFileName <- "DOMINO_D014801_activeModules.SIF"
write.table(x = AM_networks, file = outputFileName, quote = FALSE, sep = ";", row.names = FALSE, col.names = TRUE)
path.length.hist(graph = net_AM_selected)
path.length.hist(graph = net_AM_selected, directed = FALSE)
diameter(graph = net_AM_selected)
AM_networks <- do.call(rbind, lapply(X = unique(AM$V2), FUN = function(AM_nb){
AM_selected <- AM[AM$V2 == AM_nb,]$V1
net_AM_selected <- induced.subgraph(graph = net_graph, vids = which(names(V(net_graph)) %in% AM_selected))
results_dt <- data.frame(get.edgelist(net_AM_selected),
"Cluster" = AM_nb,
"EdgesNumber" = length(E(net_AM_selected)),
"NodesNumber" = length(V(net_AM_selected)),
"DegreeMax" = max(degree(graph = net_AM_selected)),
"DegreeMean" = mean(degree(graph = net_AM_selected)),
"diameter" = diameter(graph = net_AM_selected))
names(results_dt) <- c("Node1", "Node2", "Cluster", "EdgesNumber", "NodesNumber", "DegreeMax", "DegreeMean", "diameter")
return(results_dt)
}))
## Write results
outputFileName <- "DOMINO_D014801_activeModules.SIF"
write.table(x = AM_networks, file = outputFileName, quote = FALSE, sep = ";", row.names = FALSE, col.names = TRUE)
# AMFile <- "/home/morgane/Documents/05_EJPR_RD/WF_Environment/EnvironmentProject/test/VitaminAD/OutputDOMINOResults/DOMINO_D014801_activeModules.txt"
AMFile <- "/home/morgane/Documents/05_EJPR_RD/WF_Environment/EnvironmentProject/test/VitaminAD/OutputDOMINOResults/DOMINO_D014807_activeModules.txt"
setwd(dir = "/home/morgane/Documents/05_EJPR_RD/WF_Environment/EnvironmentProject/test/VitaminAD/OutputDOMINOResults/")
## Read network
PPI_file <- "/home/morgane/Documents/06_Data/NETWORKS/01_InitialNetworks/PPI_2016-11-23.gr"
PPI_table <- read.table(file = PPI_file, sep = " ")
PPI_network <- igraph::graph.data.frame(d = PPI_table, directed = FALSE)
PPI_network <- igraph::simplify(graph = PPI_network, remove.multiple = TRUE, remove.loops = TRUE)
## Extract sub network for each active modules
AM <- read.table(file = AMFile, head = FALSE, sep = "\t")
AM_networks <- do.call(rbind, lapply(X = unique(AM$V2), FUN = function(AM_nb){
AM_selected <- AM[AM$V2 == AM_nb,]$V1
net_AM_selected <- induced.subgraph(graph = net_graph, vids = which(names(V(net_graph)) %in% AM_selected))
results_dt <- data.frame(get.edgelist(net_AM_selected),
"Cluster" = AM_nb,
"EdgesNumber" = length(E(net_AM_selected)),
"NodesNumber" = length(V(net_AM_selected)),
"DegreeMax" = max(degree(graph = net_AM_selected)),
"DegreeMean" = mean(degree(graph = net_AM_selected)),
"diameter" = diameter(graph = net_AM_selected))
names(results_dt) <- c("Node1", "Node2", "Cluster", "EdgesNumber", "NodesNumber", "DegreeMax", "DegreeMean", "diameter")
return(results_dt)
}))
## Write results
# outputFileName <- "DOMINO_D014801_activeModules.SIF"
outputFileName <- "DOMINO_D014807_activeModules.SIF"
write.table(x = AM_networks, file = outputFileName, quote = FALSE, sep = ";", row.names = FALSE, col.names = TRUE)
## Functions
## UPSETR : Create matrix from list
## INPUT :
##    - LIST - list2Compare : named list with the genes to compare
## OUTPUT :
##    - matrix : return matrix
createMatrix4Upset <- function(list2Compare){
tmp <- stack(list2Compare)
tmp <- cbind(tmp, val = 1)
matrix <- as.data.frame(reshape2::acast(
data = tmp, formula = values ~ ind, value.var = "val",
fill = 0))
return(matrix)
}
## Libraries
library("UpSetR")
## Global variables
workDirectory <- "/home/morgane/Documents/05_EJPR_RD/WF_Environment/EnvironmentProject/test/VitaminAD/"
overlapFile <- "Overlap_analysis.txt"
## Work directory
setwd(dir = workDirectory)
## Read overlap results (from overlap and domino analysis)
overlapData <- read.table(file = overlapFile, head = TRUE, sep = "\t")
head(overlapData)
## Create list of results
VitaminA_Overlap <- overlapData[c(overlapData$Molecule == "D014801" & overlapData$Analyse == "Overlap"), "WPID"]
VitaminA_DOMINO <- overlapData[c(overlapData$Molecule == "D014801" & overlapData$Analyse == "DOMINO"), "WPID"]
VitaminD_Overlap <- overlapData[c(overlapData$Molecule == "D014807" & overlapData$Analyse == "Overlap"), "WPID"]
VitaminD_DOMINO <- overlapData[c(overlapData$Molecule == "D014807" & overlapData$Analyse == "DOMINO"), "WPID"]
data_list <- list("VitaminA_Overlap" = VitaminA_Overlap, "VitaminA_DOMINO" = VitaminA_DOMINO,
"VitaminD_Overlap" = VitaminD_Overlap, "VitaminD_DOMINO" = VitaminD_DOMINO)
data_matrix <- createMatrix4Upset(list2Compare = data_list)
VitaminA_Overlap
VitaminA_DOMINO
VitaminA_DOMINO %in% VitaminA_Overlap
!(VitaminA_DOMINO %in% VitaminA_Overlap)
VitaminA_DOMINO[!(VitaminA_DOMINO %in% VitaminA_Overlap)]
